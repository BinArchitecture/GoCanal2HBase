// Code generated by protoc-gen-go. DO NOT EDIT.
// source: EntryProtocol.proto

/*
Package com_alibaba_otter_canal_protocol is a generated protocol buffer package.

It is generated from these files:
	EntryProtocol.proto

It has these top-level messages:
	Entry
	Header
	Column
	RowData
	RowChange
	TransactionBegin
	TransactionEnd
	Pair
*/
package com_alibaba_otter_canal_protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *打散后的事件类型，主要用于标识事务的开始，变更数据，结束*
type EntryType int32

const (
	EntryType_TRANSACTIONBEGIN EntryType = 1
	EntryType_ROWDATA          EntryType = 2
	EntryType_TRANSACTIONEND   EntryType = 3
	// * 心跳类型，内部使用，外部暂不可见，可忽略 *
	EntryType_HEARTBEAT EntryType = 4
)

var EntryType_name = map[int32]string{
	1: "TRANSACTIONBEGIN",
	2: "ROWDATA",
	3: "TRANSACTIONEND",
	4: "HEARTBEAT",
}
var EntryType_value = map[string]int32{
	"TRANSACTIONBEGIN": 1,
	"ROWDATA":          2,
	"TRANSACTIONEND":   3,
	"HEARTBEAT":        4,
}

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}
func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}
func (x *EntryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntryType_value, data, "EntryType")
	if err != nil {
		return err
	}
	*x = EntryType(value)
	return nil
}
func (EntryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// * 事件类型 *
type EventType int32

const (
	EventType_INSERT   EventType = 1
	EventType_UPDATE   EventType = 2
	EventType_DELETE   EventType = 3
	EventType_CREATE   EventType = 4
	EventType_ALTER    EventType = 5
	EventType_ERASE    EventType = 6
	EventType_QUERY    EventType = 7
	EventType_TRUNCATE EventType = 8
	EventType_RENAME   EventType = 9
	// *CREATE INDEX*
	EventType_CINDEX EventType = 10
	EventType_DINDEX EventType = 11
)

var EventType_name = map[int32]string{
	1:  "INSERT",
	2:  "UPDATE",
	3:  "DELETE",
	4:  "CREATE",
	5:  "ALTER",
	6:  "ERASE",
	7:  "QUERY",
	8:  "TRUNCATE",
	9:  "RENAME",
	10: "CINDEX",
	11: "DINDEX",
}
var EventType_value = map[string]int32{
	"INSERT":   1,
	"UPDATE":   2,
	"DELETE":   3,
	"CREATE":   4,
	"ALTER":    5,
	"ERASE":    6,
	"QUERY":    7,
	"TRUNCATE": 8,
	"RENAME":   9,
	"CINDEX":   10,
	"DINDEX":   11,
}

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}
func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (x *EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventType_value, data, "EventType")
	if err != nil {
		return err
	}
	*x = EventType(value)
	return nil
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *数据库类型*
type Type int32

const (
	Type_ORACLE Type = 1
	Type_MYSQL  Type = 2
	Type_PGSQL  Type = 3
)

var Type_name = map[int32]string{
	1: "ORACLE",
	2: "MYSQL",
	3: "PGSQL",
}
var Type_value = map[string]int32{
	"ORACLE": 1,
	"MYSQL":  2,
	"PGSQL":  3,
}

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}
func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (x *Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_value, data, "Type")
	if err != nil {
		return err
	}
	*x = Type(value)
	return nil
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ***************************************************************
// message model
// 如果要在Enum中新增类型，确保以前的类型的下标值不变.
// **************************************************************
type Entry struct {
	// *协议头部信息*
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// *打散后的事件类型*
	EntryType *EntryType `protobuf:"varint,2,opt,name=entryType,enum=com.alibaba.otter.canal.protocol.EntryType,def=2" json:"entryType,omitempty"`
	// *传输的二进制数组*
	StoreValue       []byte `protobuf:"bytes,3,opt,name=storeValue" json:"storeValue,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_Entry_EntryType EntryType = EntryType_ROWDATA

func (m *Entry) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Entry) GetEntryType() EntryType {
	if m != nil && m.EntryType != nil {
		return *m.EntryType
	}
	return Default_Entry_EntryType
}

func (m *Entry) GetStoreValue() []byte {
	if m != nil {
		return m.StoreValue
	}
	return nil
}

// *message Header*
type Header struct {
	// *协议的版本号*
	Version *int32 `protobuf:"varint,1,opt,name=version,def=1" json:"version,omitempty"`
	// *binlog/redolog 文件名*
	LogfileName *string `protobuf:"bytes,2,opt,name=logfileName" json:"logfileName,omitempty"`
	// *binlog/redolog 文件的偏移位置*
	LogfileOffset *int64 `protobuf:"varint,3,opt,name=logfileOffset" json:"logfileOffset,omitempty"`
	// *服务端serverId*
	ServerId *int64 `protobuf:"varint,4,opt,name=serverId" json:"serverId,omitempty"`
	// * 变更数据的编码 *
	ServerenCode *string `protobuf:"bytes,5,opt,name=serverenCode" json:"serverenCode,omitempty"`
	// *变更数据的执行时间 *
	ExecuteTime *int64 `protobuf:"varint,6,opt,name=executeTime" json:"executeTime,omitempty"`
	// * 变更数据的来源*
	SourceType *Type `protobuf:"varint,7,opt,name=sourceType,enum=com.alibaba.otter.canal.protocol.Type,def=2" json:"sourceType,omitempty"`
	// * 变更数据的schemaname*
	SchemaName *string `protobuf:"bytes,8,opt,name=schemaName" json:"schemaName,omitempty"`
	// *变更数据的tablename*
	TableName *string `protobuf:"bytes,9,opt,name=tableName" json:"tableName,omitempty"`
	// *每个event的长度*
	EventLength *int64 `protobuf:"varint,10,opt,name=eventLength" json:"eventLength,omitempty"`
	// *数据变更类型*
	EventType *EventType `protobuf:"varint,11,opt,name=eventType,enum=com.alibaba.otter.canal.protocol.EventType,def=2" json:"eventType,omitempty"`
	// *预留扩展*
	Props            []*Pair `protobuf:"bytes,12,rep,name=props" json:"props,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_Header_Version int32 = 1
const Default_Header_SourceType Type = Type_MYSQL
const Default_Header_EventType EventType = EventType_UPDATE

func (m *Header) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_Header_Version
}

func (m *Header) GetLogfileName() string {
	if m != nil && m.LogfileName != nil {
		return *m.LogfileName
	}
	return ""
}

func (m *Header) GetLogfileOffset() int64 {
	if m != nil && m.LogfileOffset != nil {
		return *m.LogfileOffset
	}
	return 0
}

func (m *Header) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *Header) GetServerenCode() string {
	if m != nil && m.ServerenCode != nil {
		return *m.ServerenCode
	}
	return ""
}

func (m *Header) GetExecuteTime() int64 {
	if m != nil && m.ExecuteTime != nil {
		return *m.ExecuteTime
	}
	return 0
}

func (m *Header) GetSourceType() Type {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return Default_Header_SourceType
}

func (m *Header) GetSchemaName() string {
	if m != nil && m.SchemaName != nil {
		return *m.SchemaName
	}
	return ""
}

func (m *Header) GetTableName() string {
	if m != nil && m.TableName != nil {
		return *m.TableName
	}
	return ""
}

func (m *Header) GetEventLength() int64 {
	if m != nil && m.EventLength != nil {
		return *m.EventLength
	}
	return 0
}

func (m *Header) GetEventType() EventType {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return Default_Header_EventType
}

func (m *Header) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// *每个字段的数据结构*
type Column struct {
	// *字段下标*
	Index *int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// *字段java中类型*
	SqlType *int32 `protobuf:"varint,2,opt,name=sqlType" json:"sqlType,omitempty"`
	// *字段名称(忽略大小写)，在mysql中是没有的*
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// *是否是主键*
	IsKey *bool `protobuf:"varint,4,opt,name=isKey" json:"isKey,omitempty"`
	// *如果EventType=UPDATE,用于标识这个字段值是否有修改*
	Updated *bool `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	// * 标识是否为空  *
	IsNull *bool `protobuf:"varint,6,opt,name=isNull,def=0" json:"isNull,omitempty"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,7,rep,name=props" json:"props,omitempty"`
	// * 字段值,timestamp,Datetime是一个时间格式的文本 *
	Value *string `protobuf:"bytes,8,opt,name=value" json:"value,omitempty"`
	// * 对应数据对象原始长度 *
	Length *int32 `protobuf:"varint,9,opt,name=length" json:"length,omitempty"`
	// *字段mysql类型*
	MysqlType        *string `protobuf:"bytes,10,opt,name=mysqlType" json:"mysqlType,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_Column_IsNull bool = false

func (m *Column) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *Column) GetSqlType() int32 {
	if m != nil && m.SqlType != nil {
		return *m.SqlType
	}
	return 0
}

func (m *Column) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Column) GetIsKey() bool {
	if m != nil && m.IsKey != nil {
		return *m.IsKey
	}
	return false
}

func (m *Column) GetUpdated() bool {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return false
}

func (m *Column) GetIsNull() bool {
	if m != nil && m.IsNull != nil {
		return *m.IsNull
	}
	return Default_Column_IsNull
}

func (m *Column) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *Column) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Column) GetLength() int32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *Column) GetMysqlType() string {
	if m != nil && m.MysqlType != nil {
		return *m.MysqlType
	}
	return ""
}

type RowData struct {
	// * 字段信息，增量数据(修改前,删除前) *
	BeforeColumns []*Column `protobuf:"bytes,1,rep,name=beforeColumns" json:"beforeColumns,omitempty"`
	// * 字段信息，增量数据(修改后,新增后)  *
	AfterColumns []*Column `protobuf:"bytes,2,rep,name=afterColumns" json:"afterColumns,omitempty"`
	// *预留扩展*
	Props            []*Pair `protobuf:"bytes,3,rep,name=props" json:"props,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RowData) Reset()                    { *m = RowData{} }
func (m *RowData) String() string            { return proto.CompactTextString(m) }
func (*RowData) ProtoMessage()               {}
func (*RowData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RowData) GetBeforeColumns() []*Column {
	if m != nil {
		return m.BeforeColumns
	}
	return nil
}

func (m *RowData) GetAfterColumns() []*Column {
	if m != nil {
		return m.AfterColumns
	}
	return nil
}

func (m *RowData) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// *message row 每行变更数据的数据结构*
type RowChange struct {
	// *tableId,由数据库产生*
	TableId *int64 `protobuf:"varint,1,opt,name=tableId" json:"tableId,omitempty"`
	// *数据变更类型*
	EventType *EventType `protobuf:"varint,2,opt,name=eventType,enum=com.alibaba.otter.canal.protocol.EventType,def=2" json:"eventType,omitempty"`
	// * 标识是否是ddl语句  *
	IsDdl *bool `protobuf:"varint,10,opt,name=isDdl,def=0" json:"isDdl,omitempty"`
	// * ddl/query的sql语句  *
	Sql *string `protobuf:"bytes,11,opt,name=sql" json:"sql,omitempty"`
	// * 一次数据库变更可能存在多行  *
	RowDatas []*RowData `protobuf:"bytes,12,rep,name=rowDatas" json:"rowDatas,omitempty"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,13,rep,name=props" json:"props,omitempty"`
	// * ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *
	DdlSchemaName    *string `protobuf:"bytes,14,opt,name=ddlSchemaName" json:"ddlSchemaName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RowChange) Reset()                    { *m = RowChange{} }
func (m *RowChange) String() string            { return proto.CompactTextString(m) }
func (*RowChange) ProtoMessage()               {}
func (*RowChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

const Default_RowChange_EventType EventType = EventType_UPDATE
const Default_RowChange_IsDdl bool = false

func (m *RowChange) GetTableId() int64 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *RowChange) GetEventType() EventType {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return Default_RowChange_EventType
}

func (m *RowChange) GetIsDdl() bool {
	if m != nil && m.IsDdl != nil {
		return *m.IsDdl
	}
	return Default_RowChange_IsDdl
}

func (m *RowChange) GetSql() string {
	if m != nil && m.Sql != nil {
		return *m.Sql
	}
	return ""
}

func (m *RowChange) GetRowDatas() []*RowData {
	if m != nil {
		return m.RowDatas
	}
	return nil
}

func (m *RowChange) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *RowChange) GetDdlSchemaName() string {
	if m != nil && m.DdlSchemaName != nil {
		return *m.DdlSchemaName
	}
	return ""
}

// *开始事务的一些信息*
type TransactionBegin struct {
	// *已废弃，请使用header里的executeTime*
	ExecuteTime *int64 `protobuf:"varint,1,opt,name=executeTime" json:"executeTime,omitempty"`
	// *已废弃，Begin里不提供事务id*
	TransactionId *string `protobuf:"bytes,2,opt,name=transactionId" json:"transactionId,omitempty"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,3,rep,name=props" json:"props,omitempty"`
	// *执行的thread Id*
	ThreadId         *int64 `protobuf:"varint,4,opt,name=threadId" json:"threadId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TransactionBegin) Reset()                    { *m = TransactionBegin{} }
func (m *TransactionBegin) String() string            { return proto.CompactTextString(m) }
func (*TransactionBegin) ProtoMessage()               {}
func (*TransactionBegin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransactionBegin) GetExecuteTime() int64 {
	if m != nil && m.ExecuteTime != nil {
		return *m.ExecuteTime
	}
	return 0
}

func (m *TransactionBegin) GetTransactionId() string {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return ""
}

func (m *TransactionBegin) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *TransactionBegin) GetThreadId() int64 {
	if m != nil && m.ThreadId != nil {
		return *m.ThreadId
	}
	return 0
}

// *结束事务的一些信息*
type TransactionEnd struct {
	// *已废弃，请使用header里的executeTime*
	ExecuteTime *int64 `protobuf:"varint,1,opt,name=executeTime" json:"executeTime,omitempty"`
	// *事务号*
	TransactionId *string `protobuf:"bytes,2,opt,name=transactionId" json:"transactionId,omitempty"`
	// *预留扩展*
	Props            []*Pair `protobuf:"bytes,3,rep,name=props" json:"props,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TransactionEnd) Reset()                    { *m = TransactionEnd{} }
func (m *TransactionEnd) String() string            { return proto.CompactTextString(m) }
func (*TransactionEnd) ProtoMessage()               {}
func (*TransactionEnd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TransactionEnd) GetExecuteTime() int64 {
	if m != nil && m.ExecuteTime != nil {
		return *m.ExecuteTime
	}
	return 0
}

func (m *TransactionEnd) GetTransactionId() string {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return ""
}

func (m *TransactionEnd) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// *预留扩展*
type Pair struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Pair) Reset()                    { *m = Pair{} }
func (m *Pair) String() string            { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()               {}
func (*Pair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Pair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Pair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Entry)(nil), "com.alibaba.otter.canal.protocol.Entry")
	proto.RegisterType((*Header)(nil), "com.alibaba.otter.canal.protocol.Header")
	proto.RegisterType((*Column)(nil), "com.alibaba.otter.canal.protocol.Column")
	proto.RegisterType((*RowData)(nil), "com.alibaba.otter.canal.protocol.RowData")
	proto.RegisterType((*RowChange)(nil), "com.alibaba.otter.canal.protocol.RowChange")
	proto.RegisterType((*TransactionBegin)(nil), "com.alibaba.otter.canal.protocol.TransactionBegin")
	proto.RegisterType((*TransactionEnd)(nil), "com.alibaba.otter.canal.protocol.TransactionEnd")
	proto.RegisterType((*Pair)(nil), "com.alibaba.otter.canal.protocol.Pair")
	proto.RegisterEnum("com.alibaba.otter.canal.protocol.EntryType", EntryType_name, EntryType_value)
	proto.RegisterEnum("com.alibaba.otter.canal.protocol.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("com.alibaba.otter.canal.protocol.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("EntryProtocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x6f, 0xe2, 0x56,
	0x10, 0x97, 0x31, 0x36, 0x78, 0x0c, 0xd4, 0xfb, 0x92, 0x48, 0x3e, 0x22, 0x0e, 0x15, 0x4d, 0x25,
	0xd4, 0xae, 0x54, 0xa9, 0x4a, 0xa5, 0x56, 0x06, 0x5e, 0x13, 0x54, 0xd6, 0x49, 0x8c, 0xd3, 0x76,
	0x8f, 0x2f, 0x78, 0x08, 0x56, 0x8d, 0x1f, 0x6b, 0x9b, 0xec, 0x72, 0xee, 0xa1, 0xb7, 0x1e, 0xfa,
	0x01, 0xfa, 0x5d, 0xfa, 0x25, 0xfa, 0x79, 0xaa, 0x37, 0xc6, 0x64, 0xb5, 0x17, 0x42, 0x0e, 0xbd,
	0x0d, 0xc3, 0xfc, 0xf9, 0xfd, 0x7e, 0x33, 0x6f, 0x0c, 0x27, 0x3c, 0x2d, 0xb2, 0xed, 0x4d, 0x26,
	0x0b, 0x39, 0x97, 0xc9, 0x60, 0xad, 0x0c, 0xd6, 0x9d, 0xcb, 0xd5, 0x40, 0x24, 0xf1, 0xbd, 0xb8,
	0x17, 0x03, 0x59, 0x14, 0x98, 0x0d, 0xe6, 0x22, 0x15, 0xbb, 0xbf, 0xe7, 0x32, 0xe9, 0xfd, 0xad,
	0x81, 0x41, 0x99, 0xec, 0x5b, 0x30, 0x97, 0x28, 0x22, 0xcc, 0x5c, 0xad, 0xab, 0xf5, 0xed, 0xd7,
	0xfd, 0xc1, 0xa1, 0xe4, 0xc1, 0x15, 0xc5, 0xb3, 0x4b, 0xb0, 0x50, 0x95, 0x08, 0xb7, 0x6b, 0x74,
	0x6b, 0x5d, 0xad, 0xdf, 0x79, 0xfd, 0xe5, 0xe1, 0x64, 0x5e, 0xa5, 0x5c, 0x34, 0x82, 0xeb, 0x5f,
	0xc6, 0x5e, 0xe8, 0x31, 0x06, 0x90, 0x17, 0x32, 0xc3, 0x9f, 0x45, 0xb2, 0x41, 0x57, 0xef, 0x6a,
	0xfd, 0x56, 0xef, 0x77, 0x1d, 0xcc, 0x5d, 0x1f, 0x06, 0x8d, 0x47, 0xcc, 0xf2, 0x58, 0xa6, 0x04,
	0xd1, 0xb8, 0xd0, 0xbe, 0x66, 0x27, 0x60, 0x27, 0xf2, 0x61, 0x11, 0x27, 0xe8, 0x8b, 0x55, 0xd9,
	0xdd, 0x62, 0x67, 0xd0, 0xde, 0x39, 0xaf, 0x17, 0x8b, 0x1c, 0x0b, 0x2a, 0xa5, 0x33, 0x07, 0x9a,
	0x39, 0x66, 0x8f, 0x98, 0x4d, 0x22, 0xb7, 0x4e, 0x9e, 0x53, 0x68, 0x95, 0x1e, 0x4c, 0x47, 0x32,
	0x42, 0xd7, 0xa0, 0xf4, 0x13, 0xb0, 0xf1, 0x03, 0xce, 0x37, 0x05, 0x86, 0xf1, 0x0a, 0x5d, 0x93,
	0x42, 0x3d, 0x80, 0x5c, 0x6e, 0xb2, 0x39, 0x12, 0xcb, 0x06, 0xb1, 0xfc, 0xfc, 0x30, 0x4b, 0x22,
	0x68, 0xbc, 0x79, 0x3b, 0xbb, 0x9d, 0x12, 0xbd, 0xf9, 0x12, 0x57, 0x82, 0xa0, 0x36, 0xa9, 0xd7,
	0x2b, 0xb0, 0x0a, 0x71, 0xbf, 0x43, 0x6f, 0xed, 0xdb, 0x3f, 0x62, 0x5a, 0x4c, 0x31, 0x7d, 0x28,
	0x96, 0x2e, 0x50, 0xfb, 0x1f, 0xc1, 0x22, 0x27, 0x75, 0xb7, 0x9f, 0xad, 0x71, 0x95, 0x72, 0x61,
	0xde, 0xdd, 0x8c, 0xbd, 0x90, 0xb3, 0x6f, 0xc0, 0x58, 0x67, 0x72, 0x9d, 0xbb, 0xad, 0xae, 0xde,
	0xb7, 0x9f, 0xc3, 0xe0, 0x46, 0xc4, 0x59, 0xef, 0x5f, 0x0d, 0xcc, 0x91, 0x4c, 0x36, 0xab, 0x94,
	0xb5, 0xc1, 0x88, 0xd3, 0x08, 0x3f, 0x94, 0x33, 0x60, 0x9f, 0x41, 0x23, 0x7f, 0x97, 0xec, 0x47,
	0x6f, 0xb0, 0x16, 0xd4, 0x53, 0x45, 0x46, 0x27, 0x32, 0x2a, 0x3a, 0xff, 0x09, 0xb7, 0x24, 0x78,
	0x53, 0x45, 0x6f, 0xd6, 0x91, 0x28, 0x30, 0x22, 0xad, 0x9b, 0xec, 0x0c, 0xcc, 0x38, 0xf7, 0x37,
	0x49, 0x42, 0x32, 0x37, 0x2f, 0x8c, 0x85, 0x48, 0x72, 0x7c, 0x82, 0xd9, 0x38, 0x06, 0xa6, 0xea,
	0xf6, 0x48, 0xbb, 0x53, 0x8a, 0xdb, 0x01, 0x33, 0x29, 0x45, 0xb4, 0x08, 0xda, 0x2b, 0xb0, 0x56,
	0xdb, 0x0a, 0xad, 0xd2, 0xd5, 0xea, 0xfd, 0xa3, 0x41, 0x23, 0x90, 0xef, 0xc7, 0xa2, 0x10, 0xec,
	0x07, 0x68, 0xdf, 0xe3, 0x42, 0x66, 0x58, 0x32, 0xcd, 0x5d, 0x8d, 0x9a, 0x3f, 0xe3, 0x21, 0xec,
	0xa4, 0xf9, 0x1e, 0x5a, 0x62, 0x51, 0x60, 0x56, 0xe5, 0xd7, 0x8e, 0xcc, 0xdf, 0xb3, 0xd6, 0x8f,
	0x1a, 0xce, 0x5f, 0x35, 0xb0, 0x02, 0xf9, 0x7e, 0xb4, 0x14, 0xe9, 0x03, 0x2a, 0x89, 0x69, 0xa3,
	0x26, 0x11, 0x4d, 0xe8, 0x93, 0xd5, 0xa9, 0xbd, 0x7c, 0x75, 0x4e, 0xd5, 0x28, 0xc7, 0x51, 0x42,
	0xca, 0xed, 0x27, 0x65, 0x83, 0x9e, 0xbf, 0x4b, 0x68, 0x25, 0x2d, 0xf6, 0x1d, 0x34, 0xb3, 0x52,
	0xcc, 0x6a, 0xc1, 0xbe, 0x38, 0xdc, 0xa9, 0x92, 0x7f, 0xcf, 0xbe, 0x7d, 0xd4, 0xcc, 0xcf, 0xa0,
	0x1d, 0x45, 0xc9, 0xec, 0xe9, 0x61, 0x75, 0x68, 0xb0, 0x7f, 0x68, 0xe0, 0x84, 0x99, 0x48, 0x73,
	0x31, 0x2f, 0x62, 0x99, 0x0e, 0xf1, 0x21, 0x4e, 0x3f, 0x7d, 0xd9, 0xa5, 0x3e, 0x67, 0xd0, 0x2e,
	0x9e, 0x02, 0x27, 0xd1, 0xee, 0x88, 0xbc, 0x6c, 0x18, 0xea, 0xc8, 0x14, 0xcb, 0x0c, 0x45, 0x54,
	0x1d, 0x99, 0x5e, 0x0e, 0x9d, 0x8f, 0x80, 0xf0, 0x34, 0xfa, 0x1f, 0x60, 0xf4, 0x7a, 0x50, 0x27,
	0x38, 0x36, 0xe8, 0xbf, 0xe1, 0x96, 0x5a, 0x58, 0x4f, 0xcf, 0x83, 0x4a, 0x9f, 0xdf, 0x82, 0xb5,
	0x3f, 0xc2, 0xec, 0x14, 0x9c, 0x30, 0xf0, 0xfc, 0x99, 0x37, 0x0a, 0x27, 0xd7, 0xfe, 0x90, 0x5f,
	0x4e, 0x7c, 0x47, 0x63, 0x36, 0x54, 0xc7, 0xd9, 0xa9, 0x31, 0x06, 0x9d, 0x8f, 0x42, 0xb8, 0x3f,
	0x76, 0x74, 0xd6, 0x06, 0xeb, 0x8a, 0x7b, 0x41, 0x38, 0xe4, 0x5e, 0xe8, 0xd4, 0xcf, 0xff, 0xd4,
	0xc0, 0xda, 0x6f, 0x0e, 0x03, 0x30, 0x27, 0xfe, 0x8c, 0x07, 0xa1, 0xa3, 0x29, 0xbb, 0xdc, 0x23,
	0xa7, 0xa6, 0xec, 0x31, 0x9f, 0xf2, 0x90, 0x3b, 0xba, 0xb2, 0x47, 0x01, 0x57, 0xfe, 0x3a, 0xb3,
	0xc0, 0xf0, 0xa6, 0x21, 0x0f, 0x1c, 0x43, 0x99, 0x3c, 0xf0, 0x66, 0xdc, 0x31, 0x95, 0x79, 0x7b,
	0xc7, 0x83, 0xb7, 0x4e, 0x83, 0xb5, 0xa0, 0x19, 0x06, 0x77, 0xfe, 0x48, 0x85, 0x37, 0x55, 0x6a,
	0xc0, 0x7d, 0xef, 0x0d, 0x77, 0x2c, 0x2a, 0x33, 0xf1, 0xc7, 0xfc, 0x57, 0x07, 0xa8, 0x7c, 0x69,
	0xdb, 0xe7, 0x7d, 0xa8, 0x57, 0x50, 0xae, 0x03, 0x6f, 0x34, 0xe5, 0x8e, 0xa6, 0x0a, 0xd2, 0x41,
	0x76, 0x6a, 0xca, 0xbc, 0xb9, 0x54, 0xa6, 0x3e, 0xfc, 0x0a, 0x0e, 0x7e, 0x2d, 0x87, 0x30, 0x52,
	0xbf, 0x49, 0xb4, 0x2b, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0x8b, 0xee, 0x8e, 0x73,
	0x07, 0x00, 0x00,
}
